#!/bin/bash

## keep these script comments intact

## preparation...

## task: update APT package lists
## sudo apt-get update

## task: install aptitude
## sudo apt-get install aptitude

## task: get VPN config file
## a) go to https://www.privateinternetaccess.com/pages/ovpn-config-generator
## b) select country
## c) choose:
## TCP/501
## RSA-4096
## AES-256-GCM
## d) check 'Use IP'
## e) click generate
## f) store as /etc/openvpn/openvpn.conf
##    kdesudo kwrite /etc/openvpn/openvpn.conf

## task: get /etc/openvpn/auth.txt into place
##
## kdesudo kwrite /etc/openvpn/auth.txt
## Add:
##
## user
## password
##
## Make sure there are no extra spaces.
## Save.

set -x
set -e

if [ ! "$(id -u)" == "0" ]; then
   true "ERROR: Must run as root! sudo $0"
   exit 1
fi

if [ ! -f /etc/openvpn/auth.txt ]; then
   true "ERROR: /etc/openvpn/auth.txt does not exist!"
   exit 2
fi

## Prevent Qubes update check from interfering with apt-get.
## (Since it would lock apt-get and the use of apt-get would fail.)
systemctl --no-pager stop qubes-update-check.timer >/dev/null 2>&1 || true
systemctl --no-pager stop qubes-update-check >/dev/null 2>&1 || true

pushd /etc/openvpn

for file_name in ./*.conf ; do
   true "file_name: $file_name"

   if ! grep "proto tcp" "$file_name" ; then
      echo 'proto tcp' >> "$file_name"
   fi

   if ! grep "dev tun0" "$file_name" ; then
      echo 'dev tun0' >> "$file_name"
   fi

   if ! grep "auth-user-pass auth.txt" "$file_name" ; then
      echo 'auth-user-pass auth.txt' >> "$file_name"
   fi

   if ! grep "script-security 2" "$file_name" ; then
      echo 'script-security 2' >> "$file_name"
   fi

   if ! grep "up /etc/openvpn/update-resolv-conf" "$file_name" ; then
      echo 'up /etc/openvpn/update-resolv-conf' >> "$file_name"
   fi

   if ! grep "down /etc/openvpn/update-resolv-conf" "$file_name" ; then
      echo 'down /etc/openvpn/update-resolv-conf' >> "$file_name"
   fi

   if ! grep "user tunnel" "$file_name" ; then
      echo "user tunnel" >> "$file_name"
   fi

   if ! grep "iproute /usr/bin/ip_unpriv" "$file_name" ; then
      echo "iproute /usr/bin/ip_unpriv" >> "$file_name"
   fi

   if ! grep "keepalive 5 15" "$file_name" ; then
      echo "keepalive 5 15" >> "$file_name"
   fi
done

echo "
tunnel ALL=(ALL) NOPASSWD: /bin/ip
tunnel ALL=(ALL) NOPASSWD: /usr/sbin/openvpn *
Defaults:tunnel !requiretty
Defaults:tunnel env_keep += script_type
Defaults:tunnel env_keep += dev
" > /etc/sudoers.d/vpn_unpriv

cat /etc/sudoers.d/vpn_unpriv

mkdir -p /etc/uwt.d

## Required on Whonix-Gateway so apt-get etc. will return to be using system default
## networking. Otherwise, it would be blocked by the Whonix-Gateway firewall.
echo "
uwtwrapper_global=0
" > /etc/uwt.d/50_vpn.conf

mkdir -p /etc/torbrowser.d

echo '
TB_NO_TOR_CON_CHECK=1
CURL_PROXY="--fail"
' > /etc/torbrowser.d/50_vpn.conf

apt-get --yes install resolvconf

aptitude keep-all

echo "
d       /run/openvpn                      0755    tunnel    tunnel    -       -
d       /run/resolvconf                   0775    root      tunnel    -       -
d       /run/resolvconf/interface         0775    root      tunnel    -       -
" > /usr/lib/tmpfiles.d/50_openvpn_unpriv.conf

mkdir -p /run/resolvconf
chown --recursive root:tunnel /run/resolvconf
chmod --recursive 775 /run/resolvconf

chown -R tunnel:tunnel /etc/openvpn

chown -R tunnel:tunnel /var/run/openvpn

chmod -R g-r /etc/openvpn
chmod -R o-r /etc/openvpn
chmod -R g-w /etc/openvpn
chmod -R o-w /etc/openvpn

cp /lib/systemd/system/openvpn@.service /lib/systemd/system/openvpn@openvpn.service

systemctl --no-pager enable openvpn@openvpn

systemctl --no-pager restart openvpn@openvpn

systemctl --no-pager status openvpn@openvpn

systemctl --no-pager restart resolvconf

systemctl --no-pager status resolvconf

cat /etc/resolv.conf

## Non-Qubes-Whonix specific.
if grep "10.152.152." /etc/resolv.conf ; then
   true "ERROR: DNS config."
   exit 4
fi

if ! grep "TOR_TRANSPROXY=1" /etc/environment ; then
   echo "
TOR_TRANSPROXY=1
" >> /etc/environment
fi

echo '
whonixcheck_skip_functions+=" check_tor_bootstrap "
whonixcheck_skip_functions+=" check_tor_socks_port_reachability "
whonixcheck_skip_functions+=" check_tor_socks_port "
#whonixcheck_skip_functions+=" check_tor_trans_port "
whonixcheck_skip_functions+=" check_stream_isolation "
whonixcheck_skip_functions+=" download_whonix_news "

## {{ Alternative to disabling check_tor_trans_port.

## Make the Tor TransPort test work by simulating the Tor SocksPort test succeeded.
CHECK_TOR_RESULT_SOCKS_PORT=0

## Do not warn if Tor was not detected. (Will be the VPN.)
WHONIXCHECK_NO_EXIT_ON_TRANS_PORT_DETECTION_FAILURE=1

## }}

## {{ Alternative to download_whonix_news.

## Download news through system default.
#CURL_PROXY_WHONIX_NEWS="--fail"

## }}
' > /etc/whonix.d/50_vpn.conf

mkdir -p /etc/whonix_firewall.d

echo "
WORKSTATION_FIREWALL=1
TUNNEL_FIREWALL_ENABLE=true
" > /etc/whonix_firewall.d/50_vpn.conf

cat /etc/whonix_firewall.d/50_vpn.conf

whonix_firewall

true "INFO: Success!"
